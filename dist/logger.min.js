(function(name, parent){
    var BaseLogger = function(){
        var _baseLogger = this;

        // defines log levels and their order (priority)
        var levels = ['log', 'table', 'info', 'warn', 'error'];
        
        // config will hold the configuration used at runtime, e.g. 
        var config = {};

        // "read-only" getter for config
        this.getConfig = function getConfig(){
            return JSON.parse(JSON.stringify(config));
        };

        // default emit function: uses console for logging messages
        var emit = function emit(level, args){
            console[level](args);
        };

        // init the module with optional parameters
        this.init = function init(options){
            // used for checking the type of each attribute in options
            var typeOfenabled = typeof options.enabled;
            var typeOfLevel = typeof options.level;
            var typeOfLevels = typeof options.levels;
            var typeOfEmit = typeof options.emit;

            // enabled setup
            if (typeOfenabled === 'boolean'){
                config.enabled = options.enabled;
            } else if (typeOfenabled !== 'undefined') {
                throw new Error('BaseLogger :: illegal type for enabled - expected boolean, got ' + typeOfenabled);
            }

            /* one-level setup
            * only shows messages with level higher or equal to the required one, e.g.
            * options = {
            *     level: 'info'
            * }
            */
            if (typeOfLevel === 'string'){
                if (levels.indexOf(options.level) === -1){
                    throw new Error('Logger :: unknown level ' + options.level);
                } else {
                    for (var i = 0; i < levels.length; i++){
                        config[levels[i]] = levels.indexOf(options.level) <= i;
                    }
                }
            } else if (typeOfLevel !== 'undefined') {
                throw new Error('BaseLogger :: illegal type for level - expected string, got ' + typeOfLevel);
            }

            /* level-by-level setup
            * sets each level on a case-by-case basis, e.g.
            * options = {
            *     levels: { 
            *         'log': false, 
            *         'info': false, 
            *         'warn': true,
            *         'error': true,
            *         'table': false 
            *     }
            * }
            */
            if (typeOfLevels === 'object'){
                var level;
                // sanity checks first
                for (level in options.levels){
                    // sanity check for each level's value type (must be a boolean)
                    typeOfLevel = typeof options.levels[level]; 
                    if (typeOfLevel !== 'boolean'){
                        throw new Error('BaseLogger :: illegal value type for level "' + level + '"' +
                                ' - expected boolean, got "' + typeOfLevel + '"');
                    }

                    // ignore unknown levels
                    if (levels.indexOf(level) === -1){
                        throw new Error('BaseLogger :: unknown log level "' + level + '"');
                    }
                }

                // now that we are sure all values are legal, we can put them into the new configuration
                for (level in options.levels){
                    config[level] = !!options.levels[level];
                }
            } else if (typeOfLevels !== 'undefined'){
                throw new Error('BaseLogger :: illegal type for levels - expected object, got ' + typeOfLevels);
            }

            /* custom emit function
            * allows you to use a custom function as an emitter
            */
            if (typeOfEmit === 'function'){
                emit = options.emit;
            } else if (typeOfEmit !== 'undefined'){
                throw new Error('BaseLogger :: illegal type for emit - expected function, got ' + typeOfEmit);
            }
        };

        
        /* define a method for each log level
        *  each method uses the general function emit to log messages
        */
        this.log = function log(){
            var args = Array.prototype.slice.call(arguments);
            if (config.enabled && !!config.log){
                emit('log', args);
            }
        };

        this.table = function table(){
            var args = Array.prototype.slice.call(arguments);
            if (config.enabled && !!config.table){
                emit('table', args);
            }    
        };

        this.info = function info(){
            var args = Array.prototype.slice.call(arguments);
            if (config.enabled && !!config.info){
                emit('info', args);
            }
        };
        
        this.warn = function warn(){
            var args = Array.prototype.slice.call(arguments);
            if (config.enabled && !!config.warn){
                emit('warn', args);
            }    
        };
        
        this.error = function error(){
            var args = Array.prototype.slice.call(arguments);
            if (config.enabled && !!config.error){
                emit('error', args);
            }    
        };

        this.isEnabled = function(){
            return !!config.enabled;
        };

        // default setup: show every message
        _baseLogger.init({
            level: 'log',
            enabled: true
        });

    };
    parent[name] = BaseLogger;

})('BaseLogger', window);
(function(name, parent){
    var RotatingLog = function(){

        // IMPORTANT: requires Logger
        var logger = new BaseLogger();

        // this Array will contain each message
        var messages = [];
        // this is the max size of messages (before it gets downloaded)
        var maxSize = 100;

        // true if logger is enabled (by config) to record messages
        var recordingEnabled = true;
        // true if logger is recording messages
        var isRecording = false;
        // if true, only the last maxSize messages are recorded
        var sliding = true;

        /* wraps original Logger's getConfig function
        * adding maxSize attribute
        */
        this.getConfig = function(){
            var config = logger.getConfig();
            config.maxSize = maxSize;
            config.sliding = sliding;
            return config;
        };


        var handleMessages = function(level, args){
            if (messages.length >= maxSize){
                if (!sliding){
                    endRotate();
                } else {
                    messages.shift();
                }
            }

            logger[level](args);
            if (recordingEnabled && logger.getConfig().enabled){
                messages.push([level, args]);
            }
        };

        // expose Logger's main methods
        this.log = function(){
            var args = Array.prototype.slice.call(arguments);
            handleMessages('log', args);
        };
        this.info = function(){
            var args = Array.prototype.slice.call(arguments);
            handleMessages('info', args);
        };
        this.table = function(){
            var args = Array.prototype.slice.call(arguments);
            handleMessages('table', args);
        };
        this.warn = function(){
            var args = Array.prototype.slice.call(arguments);
            handleMessages('warn', args);
        };
        this.error = function(){
            var args = Array.prototype.slice.call(arguments);
            handleMessages('error', args);
        };

        // this will open a new tab showing a chunk of messages in JSON format
        var saveRecords = function(msgs){
            var exportData = 'data:text/json;charset=utf-8,';
            exportData += JSON.stringify(msgs, null, 4);
            var encodedUri = encodeURI(exportData);
            window.open(encodedUri, '_blank');
        };

        var endRotate = function(){
            saveRecords(messages);
            messages = [];
        };

        // starts adding logs to messages var
        this.startRecording = function(resetMessages){
            if (!!resetMessages){
                messages = [];
            }
            isRecording = true;
        };

        // stops recording messages and downloads them as JSON
        this.endRecording = function(){
            if (!isRecording){
                console.warn('RotatingLog :: endRecording called while RotatingLog was not recording');
            }
            isRecording = false;
            endRotate();
        };

        this.init = function(options){
            var typeOfMaxSize = typeof options.maxSize;
            var typeOfSliding = typeof options.sliding;
            var typeOfRecEnabled = typeof options.recordingEnabled;
            var typeOfSaveRecords = typeof options.saveRecords;

            /* define custom maxSize
            * maxSize defines the max number of messages recorded
            */
            if (typeOfMaxSize !== 'undefined'){
                if (typeOfMaxSize !== 'number'){
                    throw new Error('RotatingLog :: illegal type "' + typeOfMaxSize + '" for maxSize, "number" expected');
                } else {
                    maxSize = options.maxSize;
                    delete options.maxSize;
                }
            }

            /* enable "sliding window" recording
            * if enabled, the logger will record the last records only (<= maxSize)
            * if not enabled, the logger will automatically save a list of messages when length = maxSize 
            */
            if (typeOfSliding !== 'undefined'){
                if (typeOfSliding !== 'boolean'){
                    throw new Error('RotatingLog :: illegal type "' + typeOfSliding + '" for sliding, "boolean" expected');
                } else {
                    sliding = options.sliding;
                    delete options.sliding;
                }
            }

            /* enable message recording
            * if disabled, no messages are recorded (even between startRecording and endRecording)
            */
            if (typeOfRecEnabled !== 'undefined'){
                if (typeOfRecEnabled !== 'boolean'){
                    throw new Error('RotatingLog :: illegal type "' + typeOfRecEnabled + '" for recordingEnabled, "boolean" expected');
                } else {
                    recordingEnabled = options.recordingEnabled;
                    delete options.recordingEnabled;
                }
            }

            /* custom saveRecords function
            * allows you to use a custom function as saveRecords
            */
            if (typeOfSaveRecords === 'function'){
                saveRecords = options.saveRecords;
            } else if (typeOfSaveRecords !== 'undefined'){
                throw new Error('RotatingLog :: illegal type for saveRecords - expected function, got ' + valueType);
            }

            logger.init(options);
        };

    };
    parent[name] = RotatingLog;
})('RotatingLog', window);
/**
* @ngdoc object
* @name logger.BarneyLogger
*
* @description
* Use Logger service.
*
* To use **Logger** service, you have to add **BarneyLogger** dependency to your component (i.e: directive, controller...).
*
* In this example, I have added dependency of BarneyLogger to a controller:
* <pre>
* angular.module('mock').controller('HomePageController', [
*     'BarneyLogger', '$scope',
*     function(Logger, $scope){
*         // we can use "Logger" object here
*     }
* ]);
* </pre>
* Note that I included **BarneyLogger** as dependency but I have renamed it as **Logger** to use it more easily in controller code.
*
* # Enable/Disable Logger
* To **enable** or **disable** logger just call init with enabled:true/false.
*
* <pre>
*  Logger.init({enabled:true})  //Logger is now enabled
*
*  Logger.init({enabled:false}) //Logger is now disabled
* </pre>
*
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#init
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method is used to initialize or to change the configuration of 
 * the Logger's module. Call init whenever you need to change the Logger's configuration. 
 *
 * ***Is recommended to initialize Logger in app.js so 
 * remember that if you change Logger's configuration in a new page you also change 
 * the configuration in ALL your site ***
 *
 * @param {Object} options (see attributes below)
 * @param {boolean} [options.enabled=true] Enable/Disable the Logger
 * @param {string} [options.level='log'] Actives all levels following the given
 * @param {Object} [options.levels=undefined] Levels contains the manual configuration of the Logger.
 * @param {function} [options.emit=Uses window.console] Emit is an addictional parameter that allows you to use a custom function as an emitter.
 *
 * @example
 * # Logger Init 
 * Here are some examples of the init method.
 *
 * **Default initialization**
 * <pre>
 * 
 *   Logger.init({
 *      level: 'log', //set all level to true
 *      enabled: true //enables logger
 *   }); 
 *
 * </pre>
 *
 * **Logger with manual configuration**
 *
 * I want that logger logs only logs, warnings and errors
 * <pre>
 *     Logger.init({
 *      levels: { 
 *         'log': true, 
 *         'info': false,
 *         'table': false  
 *         'warn': true,
 *         'error': true
 *       },
 *       enabled: true //enables logger
 *      }); 
 *
 * </pre>
 *
 * **Logger with level configuration and personalized emit**
 *
 * I want that logger logs only warning and error
 * <pre>
 *     Logger.init({
 *       level: 'warn',  //Logger now logs only warnings and errors
 *       emit: function(level, args){
 *               console[level](args); //log args
 *               
 *               // Do something, i.e: sends error, store something etc.
 *             },
 *        enabled: true //enables logger
 *      }); 
 *
 * </pre>
 * 
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#log
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method for each log level.
 * Each method uses the general function emit to log messages
 *
 * ***Log level must be true and logger must be enabled***
 *
 * @param {*} arguments Arguments to log
 *
 * @example
 * # Logger log 
 * Here is one example of the Log method.
 *
 * <pre>
 *     Logger.log('Hello World!') //Logs Hello World
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#table
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method for each table level.
 * Each method uses the general function emit as table messages
 *
 * ***Table level must be true and logger must be enabled***
 *
 * @param {*} arguments Arguments to log
 *
 * @example
 * # Logger table 
 * Here is one example of the Table method.
 *
 * <pre>
 *     Logger.table({Hello:'World'}) //Logs World in table at the key Hello
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#info
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method for each info level.
 * Each method uses the general function emit as info messages
 *
 * ***Info level must be true and logger must be enabled***
 *
 * @param {*} arguments Arguments to log
 *
 * @example
 * # Logger info 
 * Here is one example of the Info method.
 *
 * <pre>
 *     Logger.info('Hello World!') //Logs Hello World as an info message
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#getConfig
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method is a "read-only" getter for config. 
 *
 * Get Logger's configuration.
 *
 * @example
 * # Logger getConfig 
 * Here is one example of the getConfig method.
 *
 * <pre>
 *     console.log( Logger.getConfig() );
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#warn
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method for each warn level.
 * Each method uses the general function emit as a warning messages
 *
 * ***Warn level must be true and logger must be enabled***
 *
 * @param {*} arguments Arguments to log
 *
 * @example
 * # Logger warn 
 * Here is one example of the Warn method.
 *
 * <pre>
 *     Logger.warn('Hello World!') //Logs Hello World as a warning message
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#error
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method for each error level.
 * Each method uses the general function emit as error messages
 *
 * ***Error level must be true and logger must be enabled***
 *
 * @param {*} arguments Arguments to log
 *
 * @example
 * # Logger error 
 * Here is one example of the Error method.
 *
 * <pre>
 *     Logger.error('Hello World!') //Logs Hello World as an error message
 * </pre>
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyLogger#isEnabled
 * @methodOf logger.BarneyLogger
 *
 * @description 
 * This method defines a method to know if Logger is enabled or not;
 * 
 *
 * @example
 * # Logger isEnabled 
 * Here is one example of the isEnabled method.
 *
 * <pre>
 *     if(Logger.isEnabled()){
 *          //Do something
 *      } else {
 *          //Do something else
 *      }
 * </pre>
 *
*/

angular.module('barney').factory('BarneyLogger', function(){
    
    var logger = new BaseLogger();

    return logger;
});
/**
* @ngdoc object
* @name logger.BarneyRotatingLogger
*
* @description
* Use **RotatingLogger** service.
*
* To use **RotatingLogger** service, you have to add **BarneyRotatingLogger** dependency to your component (i.e: directive, controller...).
*
* ***Remember that RotatingLogger requires BaseLogger to work 
* ( but it doesn't requires BaseLogger service ).***
*
* In this example, I have added dependency of **BarneyRotatingLogger** to a controller:
* <pre>
* angular.module('mock').controller('HomePageController', [
*     'BarneyRotatingLogger', '$scope',
*     function(RotatingLogger, $scope){
*         // we can use "RotatingLogger" object here
*     }
* ]);
* </pre>
* Note that I included **BarneyRotatingLogger** as dependency but I have renamed it as **RotatingLogger** to use it more easily in controller code.
*
* # Enable/Disable Logger
* To **enable** or **disable** **RotatingLogger** just call init with enabled:true/false.
*
* <pre>
*  RotatingLogger.init({enabled:true})  //RotatingLogger is now enabled
*
*  RotatingLogger.init({enabled:false}) //RotatingLogger is now disabled
* </pre>
*
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#log
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_log here} to see log() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#table
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_table here} to see table() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#info
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_info here} to see info() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#warn
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_warn here} to see warn() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#error
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_error here} to see error() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#isEnabled
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is the same used in **BarneyLogger**, click {@link logger.BarneyLogger#methods_isEnabled here} to see isEnabled() documentation.
 *
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#init
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method is used to initialize or to change the configuration of 
 * the Rotating Logger's module. Call init whenever you need to change the Rotating Logger's configuration. 
 *
 * Remember to see **BaseLogger** {@link logger.BarneyLogger#methods_init init()} documentation to configure also the **BaseLogger** functionality.
 *
 * ***Is recommended to initialize RotatingLogger in app.js so 
 * remember that if you change RotatingLogger' s configuration in a new page you also change 
 * the configuration in ALL your site ***
 *
 * @param {Object} options (see attributes below)
 * @param {Integer} [options.maxSize=100] maxSize defines the max number of messages recorded.
 * @param {boolean} [options.sliding=true] Enables "sliding window" recording.
 *
 * If enabled, the logger will record the last records only (<= maxSize)
 *
 * If not enabled, the logger will automatically save a list of messages when length = maxSize 
 * @param {boolean} [options.recordingEnabled=true] Enables message recording
 *
 * If disabled, no messages are recorded (even between startRecording and endRecording)
 *
 * @param {function} [options.saveRecords=exports JSon file] Function used to export recorded messages.
 *
 * @example
 * # Logger Init 
 * Here is one example of the init method.
 *
 * **RotatingLogger initialization**
 * <pre>
 * 
 *   RotatingLogger.init({
 *      maxSize: 100, //set maxSize to 100
 *      sliding: true, //enables sliding mode
 *      recordingEnabled: true, //enable recording
 *      enabled: true //enable logger
 *   }); 
 *
 * </pre>
 * 
 * **RotatingLogger initialization with custom saveRecords**
 *
 * Here is an example of initialization where saveRecords sends messages calling an API.
 * <pre>
 * 
 *   RotatingLogger.init({
 *      ...,
 *      saveRecords: function(messages){
 *          API_send(messages)
 *      }
 *   }); 
 *
 * </pre>
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#getConfig
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 * This method wraps original BaseLogger's getConfig function
 * adding maxSize attribute, click {@link logger.BarneyLogger#methods_getConfig here} to see getConfig() documentation.
*/


/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#endRecording
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 *
 * This method tells **RotatingLogger** to stop recording messages and 
 * calls internal function saveRecords (set within init method).
 *
 * If you're not recording it will show an error message.
 *
 * **Remember that first you have to start a recording with the startRecording method**
 * @example
 * # RotatingLogger endRecording
 *
 * This is an example of how to use **endRecording** method
 * <pre>
 *  //Stop recording and saves records
 *  RotatingLogger.endRecording()  
 *
 *
 * </pre>
*/

/**
 * @ngdoc function
 * @name logger.BarneyRotatingLogger#startRecording
 * @methodOf logger.BarneyRotatingLogger
 *
 * @description 
 *
 * This method starts the recording of all the messages logged by RotatingLogger.
 *
 * ***Remember that recordingEnabled must be set to true to record*** 
 *
 * @example
 * # RotatingLogger startRecording
 *
 * This is an example of how to use **startRecording** method
 * <pre>
 *  RotatingLogger.startRecording() // Start recording
 * </pre>
 *
*/

angular.module('barney').factory('BarneyRotatingLogger', function(){

    /*
    var config = {
        log: true, 
         info: true, 
         warn: true,
         error: true,
        table: true,
        enabled:true
    };
    */
    var logger = new RotatingLog();

    return logger;
});