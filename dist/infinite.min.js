/**
 * @ngdoc overview
 * @name infinite
 *
 *
 * @description
 * **BarneyInfinite** is the module of Barney that provides you the infinite scroll.
 *
 * **BarneyInfinite** listens when a page is scrolled and 
 * knows when you have reached the bottom of the page.
 * When you are at the bottom of the page it calls the given function. 
 * 
 * Remember that you don't need to call the given function in your controller
 * because it will take care **BarneyInfinite**.
 * 
 * **BarneyInfinite** will disable itself after the call of the given function to not 
 * listen other scroll while the call is processing.
 * To reenable **BarneyInfinite** you have to pass, to the given function, a new function
 * that you can call inside to reactivate **BarneyInfinite** when you need.
 * See the example to the directive documentation.
 *
 * Don' t worry if your contents doesn't fill the page because infinte scroll
 * will fill the page for you, if there will be enough contents!
 * 
 * If you want to activate **BarneyInfinite** before the reaching of the end of the window you 
 * can use the offset attribute to tell **BarneyInfinite** how much before it must activate 
 * itself.
 *
 * # Import module
 * To import **BarneyInfinite** Scroll module, include barney.**BarneyInfinite** to 
 * your web application module (usually in app.js file)
 * <pre>
 * angular.module('yourApplicationModule', [
 *     'barney.infinite'
 * ])
 * </pre>
 * 
 * Remember to include the external javascript files you need:
 *
 * <pre>
 *
 *	  <!-- Infinite module -->
 *   <script type="text/javascript" src="./bower_components/barney/infinite/infinite.mod.js"> 
 *
 *	  <!-- Infinite directive -->
 *   <script type="text/javascript" src="./bower_components/barney/infinite/infinite-scroll.dir.js"> 
 *
 * </pre>
 *
 */
angular.module('barney.infinite', []);
/**
 * @ngdoc directive
 * @name infinite.directive:InfiniteScroll
 *
 * @description
 * Allow infinite scroll on your page.
 *
 * To use **BarneyInfinite** directive, you have to add **infinite-scroll** 
 * to the div that will contain the element' s list  and you have to define a 
 * function that will be executed when the
 * bottom of the page will be reached. If you want to reenable **BarneyInfinite** you have
 * to pass to that function a new function that will be called when you want to 
 * reactivate the infinite scroll listener. Remember that you can pass to **BarneyInfinite**
 * also a boolean ( to make Infinite does the first call )  and an offset ( to 
 * activate **BarneyInfinite** before the reaching of the end of the page).
 *
 * @example
 *
 * In this example, I have added infinite-scroll to a div that contains an ng-repeat
 * and defined a controller to show how **BarneyInfinite** should work:
 *
 * **HTML**
 * <pre>
 *  <div infinite-scroll infinite-callback="functionToCall"  
 *   infinite-enable="flag" infinite-offset="100">
 *      <p ng-repeat="item in data">
 *           {{item}}
 *       </p>
 *  </div>
 * </pre>
 *
 * **Controller**
 * 
 *
 * <pre>
 *  $scope.flag = true; 
 *
 *  $scope.functionToCall = function(reenableInfinite){
 *
 *      // here infinite is disabled
 *
 *      // here I call an API, wait response and choose if 
 *      // re-enable infinite scroll or not
 *      callApiMethod(function(){
 *          if(youWantToReenable) {
 *              // re-enable infinite scroll
 *              reenableInfinite(); 
 *          } else {
 *              //do nothing
 *          }
 *      });
 *
 *  }
 * </pre>
 *
 *
 */

angular.module('barney.infinite').directive('infiniteScroll', 
    ['$window', '$timeout',
    function($window, $timeout) {

        return {
            restrict: 'A',
            scope: {
                enable: '=infiniteEnable',
                callback: '&infiniteCallback',
                offset: '@infiniteOffset'
            },
            link: function($scope, $element) {

                // offset is used to activate infinite scroll before 
                // the end of the window has been reached, 
                // if exist it takes the specified value, else
                // it's equal to 0;
                if(!$scope.offset){ 
                    $scope.offset = 0;
                }

                var check = function(){
                    var windowHeight = 'innerHeight' in window ? window.innerHeight
                        : document.documentElement.offsetHeight;
                    var body = document.body, html = document.documentElement;
                    var docHeight = Math.max(body.scrollHeight,
                        body.offsetHeight, html.clientHeight,
                        html.scrollHeight, html.offsetHeight);
                    var windowBottom = windowHeight + window.pageYOffset + parseInt($scope.offset, 10);
                    var elementHeight = $element[0].offsetHeight;
                    
                    if(elementHeight < windowBottom || windowBottom >= docHeight){
                        $scope.enable = false;

                        $scope.callback.call()(function(){
                            $timeout(function(){
                                $scope.enable = true;
                            }, 1);
                        });
                    }
                };
                
                $scope.$watch('enable', function(){
                    if($scope.enable){
                        check();
                    }
                });

                angular.element($window).bind('scroll', function() {
                    if($scope.enable){
                        check();
                    }
                });

            }
        };
    }
]);