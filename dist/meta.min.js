if(!barneyAngular) { var barneyAngular = angular.module('barney', []); }


angular.module('barney').factory('BarneyMeta', [
    '$rootScope',
    function ($rootScope) {
        var withCanonical = 0;

        var removeCanonicalTag = function() {
            if(isCanonicalTagPresent) {
                document.querySelector("link[rel='canonical']").remove();
            }
        };

        var isCanonicalTagPresent = function() {
            return document.querySelector("link[rel='canonical']") ? true : false;
        };

        var addCanonicalTag = function() {
            if(!isCanonicalTagPresent && withCanonical) {
                var canonicalTag = document.createElement('link');
                canonicalTag.setAttribute('rel', 'canonical');
                canonicalTag.setAttribute('href', $rootScope.meta.canonical);
                document.head.appendChild(canonicalTag);
            }
        };

        $rootScope.meta = {};
        $rootScope.defaultMeta = {};
        this.init = function(metatags, config){

            if(config && config.withCanonical) {
                withCanonical = config.withCanonical;
            }

            for(var key in metatags){
                if(key !== 'canonical') {
                    $rootScope.defaultMeta[key] = metatags[key];
                    $rootScope.meta[key] = metatags[key];
                } else if(key === 'canonical'){
                    if(withCanonical) {
                        $rootScope.defaultMeta[key] = metatags[key];
                        $rootScope.meta[key] = metatags[key];

                        if(metatags[key] === '') {
                            removeCanonicalTag();
                        }
                    } else {
                        // remove canonical tag;

                        console.warn(['BarneyMeta', 'Canonical is disabled']);

                        removeCanonicalTag();
                    }
                }
            }

            // revert to default keys
            var _this = this;
            $rootScope.$on('$routeChangeStart', function(){
                _this.revert();
            });
        };
        this.get = function(key){
            if(!!$rootScope.meta[key]){
                return $rootScope.meta[key];
            } else {
                return '';
            }
        };
        this.set = function(metatags, callback){
            for(var key in metatags){
                if(key !== 'canonical') {
                    $rootScope.meta[key] = metatags[key];
                } else if(withCanonical && key === 'canonical'){
                    $rootScope.meta.canonical = metatags.canonical;

                    if(metatags.canonical === '') {
                        removeCanonicalTag();
                    } else {
                        addCanonicalTag();
                    }
                }
            }
            if(callback){
                window.setTimeout(function(){
                    callback();
                }, 1000);
            }
        };
        this.list = function(){
            return $rootScope.meta;
        };
        this.defaults = function(){
            return $rootScope.defaultMeta;
        };
        this.revert = function(){
            for(var key in $rootScope.defaultMeta){
                $rootScope.meta[key] = $rootScope.defaultMeta[key];

                if(key === 'canonical' && withCanonical && $rootScope.defaultMeta.canonical === '') {
                    removeCanonicalTag();
                }
            }
        };

        return this;
    }
]);
